name: Deploy to AAAI Solutions Server with Auto-Update
on:
  push:
    branches: [ main, master ]  # Deploy when pushing to main or master branch
  workflow_dispatch:          # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production Server
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js (if you use Node.js)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
      # Remove this step if you don't use Node.js
        
    - name: Install dependencies (if any)
      run: |
        # npm install  # Uncomment if you use npm
        # yarn install # Uncomment if you use yarn
        echo "No dependencies to install"
        
    - name: Build project (if needed)
      run: |
        # npm run build  # Uncomment if you have a build step
        # yarn build     # Uncomment if you use yarn build
        echo "No build step required"
    
    # ===============================================
    # AUTO-UPDATE SYSTEM INTEGRATION STARTS HERE
    # ===============================================
    
    - name: Generate build timestamp for auto-update
      id: timestamp
      run: |
        BUILD_TIMESTAMP=$(date +%s)
        echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_OUTPUT
        echo "🕐 Generated build timestamp: $BUILD_TIMESTAMP"
    
    - name: Update HTML files with build timestamp
      run: |
        echo "🔄 Updating HTML files with build timestamp..."
        find . -name "*.html" -exec sed -i "s/{{BUILD_TIMESTAMP}}/${{ steps.timestamp.outputs.BUILD_TIMESTAMP }}/g" {} \;
        
        # Show which files were updated
        echo "📁 Updated files:"
        find . -name "*.html" -exec echo "  - {}" \;
        
        echo "✅ Build timestamp ${{ steps.timestamp.outputs.BUILD_TIMESTAMP }} applied to HTML files"
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to website directory
          cd /var/www/aaai.solutions
          
          # Create backup before deployment
          sudo mkdir -p /var/backups/aaai-solutions
          sudo tar -czf /var/backups/aaai-solutions/backup-$(date +%Y%m%d-%H%M%S).tar.gz \
            --exclude='.git' \
            /var/www/aaai.solutions
          
          # Pull latest changes (now includes updated HTML files with timestamps)
          sudo git fetch origin
          sudo git reset --hard origin/main
          
          # Apply build timestamp to any remaining template files on server
          BUILD_TIMESTAMP=${{ steps.timestamp.outputs.BUILD_TIMESTAMP }}
          sudo find /var/www/aaai.solutions -name "*.html" -exec sed -i "s/{{BUILD_TIMESTAMP}}/$BUILD_TIMESTAMP/g" {} \;
          
          # Set proper permissions
          sudo chown -R www-data:www-data /var/www/aaai.solutions
          sudo find /var/www/aaai.solutions -type d -exec chmod 755 {} \;
          sudo find /var/www/aaai.solutions -type f -exec chmod 644 {} \;
          
          # Test nginx configuration
          sudo nginx -t
          
          # Reload nginx if config is valid
          sudo systemctl reload nginx
          
          # Optional: Clear any caches
          # sudo systemctl restart your-app-service  # If you have a backend service
          
          echo "✅ Deployment completed successfully with version: $BUILD_TIMESTAMP"
    
    - name: Notify auto-update system about new version
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Notify your backend about the new version for auto-update system
          BUILD_TIMESTAMP=${{ steps.timestamp.outputs.BUILD_TIMESTAMP }}
          
          echo "🔔 Notifying auto-update system about new version: $BUILD_TIMESTAMP"
          
          # Try multiple possible endpoints (adjust URLs to match your setup)
          curl -X POST http://localhost:5000/api/version \
            -H "Content-Type: application/json" \
            -d "{\"version\":\"$BUILD_TIMESTAMP\"}" \
            -s --max-time 10 || echo "⚠️  Main app endpoint not responding"
          
          curl -X POST http://localhost:8080/api/version \
            -H "Content-Type: application/json" \
            -d "{\"version\":\"$BUILD_TIMESTAMP\"}" \
            -s --max-time 10 || echo "⚠️  Alternative endpoint not responding"
          
          curl -X POST https://aaai.solutions/api/version \
            -H "Content-Type: application/json" \
            -d "{\"version\":\"$BUILD_TIMESTAMP\"}" \
            -s --max-time 10 || echo "⚠️  Public endpoint not responding"
          
          echo "📡 Version notification attempts completed"
          echo "🔄 All user browsers will automatically refresh within 2 minutes!"
          
    - name: Verify deployment and auto-update setup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Test website accessibility
          response=$(curl -s -o /dev/null -w "%{http_code}" https://aaai.solutions/)
          if [ "$response" -eq 200 ]; then
            echo "✅ Website is accessible (HTTP $response)"
          else
            echo "❌ Website returned HTTP $response"
            exit 1
          fi
          
          # Show latest commit
          cd /var/www/aaai.solutions
          echo "📝 Latest commit: $(sudo git log -1 --pretty=format:'%h - %s (%cr)')"
          
          # Verify service worker file exists
          if [ -f "/var/www/aaai.solutions/sw.js" ]; then
            echo "✅ Service Worker found"
          else
            echo "⚠️  Service Worker (sw.js) not found - auto-update may not work"
          fi
          
          # Verify auto-updater script exists
          if [ -f "/var/www/aaai.solutions/assets/js/auto-updater.js" ]; then
            echo "✅ Auto-updater script found"
          else
            echo "⚠️  Auto-updater script not found - auto-update may not work"
          fi
          
          # Check if HTML files have build timestamp
          BUILD_TIMESTAMP=${{ steps.timestamp.outputs.BUILD_TIMESTAMP }}
          if grep -q "$BUILD_TIMESTAMP" /var/www/aaai.solutions/index.html 2>/dev/null; then
            echo "✅ Build timestamp found in HTML files"
          else
            echo "⚠️  Build timestamp not found in HTML files"
          fi
          
    - name: Final deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "📊 Version: ${{ steps.timestamp.outputs.BUILD_TIMESTAMP }}"
          echo "🔄 All users will see changes automatically within 2 minutes"
          echo "🌐 Website: https://aaai.solutions"
        else
          echo "❌ DEPLOYMENT FAILED!"
          echo "Check the logs above for error details"
        fi

# ===============================================
# WHAT THIS UPDATED SCRIPT DOES:
# ===============================================
# 1. ✅ Your original deployment process (unchanged)
# 2. 🆕 Generates unique build timestamp for each deployment
# 3. 🆕 Updates all HTML files with the timestamp
# 4. 🆕 Notifies your backend about the new version
# 5. 🆕 Verifies auto-update system is properly set up
# 6. 🔄 Users automatically see changes within 2 minutes
#
# NEXT STEPS:
# 1. Add the service worker (sw.js) to your repository root
# 2. Add auto-updater script (assets/js/auto-updater.js)
# 3. Update your HTML files to include the auto-updater
# 4. Add version endpoint to your backend
# 5. Push changes - users will auto-refresh on every deployment!
# ===============================================